@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using ProyectoFinalGourmetGrill.Data
@using ProyectoFinalGourmetGrill.Services

@inject IdentityUserService IdentityUserService
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<div class="container font">
    <div class="row justify-content-center" style="margin-bottom: 5px;">
        <div class="col-md-6 col-lg-4">
            <div class="card mb-3 caja1">
                <div class="d-flex justify-content-center formtlo">
                    <h3>Login</h3>
                </div>
                <div class="card-body">
                    <StatusMessage Message="@errorMessage" />
                    <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" role="alert" />
                        <div class="mb-3 text-white">
                            <label for="email" class="form-label">Email</label>
                            <InputText @bind-Value="Input.Email" class="form-control" id="email" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                            <ValidationMessage For="() => Input.Email" class="text-danger" />
                        </div>
                        <div class="mb-3 text-white">
                            <label for="password" class="form-label">Password</label>
                            <InputText type="password" @bind-Value="Input.Password" class="form-control" id="password" autocomplete="current-password" aria-required="true" placeholder="password" />
                            <ValidationMessage For="() => Input.Password" class="text-danger" />
                        </div>
                        <div class="form-check mb-3 text-white">
                            <InputCheckbox @bind-Value="Input.RememberMe" class="form-check-input" id="rememberMe" />
                            <label for="rememberMe" class="form-check-label">Remember me</label>
                        </div>
                        <div class="text-center">
                            <button type="submit" class="btn btn-primary">Log in</button>
                        </div>
                        <div style="text-decoration-color: ">
                            <p class="mt-3">
                                <a href="Account/ForgotPassword">Forgot your password?</a>
                            </p>
                            <p>
                                <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register as a new user</a>
                            </p>
                            <p>
                                <a href="Account/ResendEmailConfirmation">Resend email confirmation</a>
                            </p>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync() {
        if (HttpMethods.IsGet(HttpContext.Request.Method)) {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser() {
        // Use the IdentityUserService to sign in without persistence
        var result = await IdentityUserService.SignInUserAsync(Input.Email, Input.Password, Input.RememberMe);
        if (result) {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}