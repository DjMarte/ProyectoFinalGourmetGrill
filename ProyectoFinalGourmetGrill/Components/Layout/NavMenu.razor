@using Microsoft.AspNetCore.Identity
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager

<div class="d-flex align-items-center justify-content-end">
    <AuthorizeView>
        <Authorized>
            <div class="d-flex align-items-center justify-content-end">
                <NavLink class="btn btn-primary mx-1" href="/">Home</NavLink>
                <NavLink class="btn btn-secondary mx-1" href="/GourmetGrill/Menu">Menu</NavLink>
                <AuthorizeView Roles="Admin">
                    <Authorized Context="Admin">
                        <NavLink class="btn btn-info mx-1" href="/GourmetGrill/Productos/Index">Inventario</NavLink>
                        <NavLink class="btn btn-warning mx-1" href="/GourmetGrill/Ordenes/Index">Ordenes</NavLink>
                    </Authorized>
                </AuthorizeView>
                <form action="Account/Logout" method="post">
                    <div class="col text-end">
                        <AntiforgeryToken />
                        <input type="hidden" name="ReturnUrl" />
                        <button type="submit" class="btn btn-danger mx-1">
                            <span aria-hidden="true"></span> SALIR
                        </button>
                    </div>
                </form>               
                <span class="btn btn-light mx-1 text-dark">Bienvenido, @nickName</span>
            </div>
        </Authorized>
        <NotAuthorized>
            <div class="d-flex align-items-center justify-content-end">
                <NavLink class="btn btn-primary mx-1" href="/">Inicio</NavLink>
                <NavLink class="btn btn-success mx-1" href="Account/Login">Login</NavLink>
                <NavLink class="btn btn-warning mx-1" href="Account/Register">Registrarse</NavLink>
            </div>
        </NotAuthorized>
    </AuthorizeView>
</div>

@code {
    private string? nickName;

    protected override async Task OnInitializedAsync() {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated) {
            var appUser = await UserManager.GetUserAsync(user);
            if (appUser != null) {
                nickName = appUser.Nombre;
            }
        }
    }
}
