@using Microsoft.AspNetCore.Identity
@implements IDisposable
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager

<div class="d-flex align-items-center justify-content-end">
    <AuthorizeView>
        <Authorized>
            <div class="nav-item px-3">
                <span class="nav-link" style="color: black;">Bienvenido, @nickName</span>
            </div>
            <div class="nav-item px-3">
                <form action="Account/Logout" method="post">
                    <AntiforgeryToken />
                    <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                    <button type="submit" class="btn btn-danger" style="background-color: #dc3545; border: 1px solid #dc3545; color: white; padding: 5px 10px; border-radius: 5px;">
                        <span class="bi bi-arrow-bar-left-nav-menu" aria-hidden="true"></span> Logout
                    </button>
                </form>
            </div>
        </Authorized>
        <NotAuthorized>
            @if (currentRoute == "/")
            {
                <div>
                    <a href="Account/Login" class="btn btn-danger">Iniciar Sesi&oacute;n</a>
                    <a href="Account/Register" class="btn btn-warning">Registrar</a>
                </div>
            }
            @if (currentRoute == "/Account/Register")
            {
                <div>
                    <a href="Account/Login" class="btn btn-danger">Iniciar Sesi&oacute;n</a>
                    <a href="/" class="btn btn-warning">Inicio</a>
                </div>
            }
            else if (currentRoute == "/Account/Login")
            {
                <div>
                    <a href="Account/Register" class="btn btn-primary">Registrar</a>
                    <a href="/" class="btn btn-warning">Inicio</a>
                </div>
            }
            @if (currentRoute == "/GourmentGrill/Menu")
            {
                <div>
                    <a href="/" class="btn btn-primary">Inicio</a>
                </div>
            }
        </NotAuthorized>
    </AuthorizeView>
</div>

@code {
    private string currentRoute;
    private string? nickName;
    private string? currentUrl;

    protected override async Task OnInitializedAsync()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            var appUser = await UserManager.GetUserAsync(user);
            if (appUser != null)
            {
                nickName = appUser.NickName;
            }
        }

        UpdateCurrentRoute();
    }

    private void UpdateCurrentRoute()
    {
        var uri = new Uri(NavigationManager.Uri);
        currentRoute = uri.PathAndQuery;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        UpdateCurrentRoute();
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}
