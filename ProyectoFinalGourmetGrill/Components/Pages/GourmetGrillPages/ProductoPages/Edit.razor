@page "/GourmetGrill/Productos/Edit/{ProductoId:int}"

@using Shared.Interfaces
@using Shared.Models
@attribute [Authorize(Roles = "Admin")]

@inject IServer<Productos> productoService
@inject IServer<CategoriaProductos> categoriaService
@inject BlobServiceClient blobService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Editar Producto</PageTitle>
<EditForm Model="Producto" OnValidSubmit="Editar">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <Toasts class="p-3" Messages="Mensaje" Delay="3000" Placement="ToastsPlacement.TopLeft" />
    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header fw-bold mb-0">
                <h3><strong>Editar Producto</strong></h3>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-8">
                        <div class="row mt-2">
                            <div class="col-12">
                                <label class="form-label" for="nombre"><strong>Nombre</strong></label>
                                <InputText class="form-control input-small" id="nombre" @bind-Value="Producto.Nombre"></InputText>
                                <ValidationMessage For="@(() => Producto.Nombre)" />
                            </div>
                        </div>
                        <div class="row mt-2">
                            <div class="col-12">
                                <label class="form-label" for="precio"><strong>Precio</strong></label>
                                <InputNumber class="form-control input-small" id="precio" @bind-Value="Producto.Precio" @oninput="ActualizarITBIS"></InputNumber>
                                <ValidationMessage For="@(() => Producto.Precio)" />
                            </div>
                        </div>
                        <div class="row mt-2">
                            <div class="col-12">
                                <label class="form-label" for="cantidad"><strong>Cantidad</strong></label>
                                <InputNumber class="form-control input-small" id="cantidad" @bind-Value="Producto.Cantidad" @oninput="ActualizarDisponibilidad"></InputNumber>
                                <ValidationMessage For="@(() => Producto.Cantidad)" />
                            </div>
                        </div>
                        <div class="row mt-2">
                            <div class="col-12">
                                <label class="form-label" for="itbis"><strong>ITBIS</strong></label>
                                <InputNumber class="form-control input-small" id="itbis" @bind-Value="Producto.ITBIS" ReadOnly></InputNumber>
                            </div>
                        </div>
                        <div class="row mt-2">
                            <div class="col-12">
                                <label class="form-label" for="categoria"><strong>Categoría</strong></label>
                                <InputSelect class="form-control input-small" id="categoria" @bind-Value="Producto.CategoriaId">
                                    <option value="">Seleccione una categoría</option>
                                    @foreach (var categoria in Categorias) {
                                        <option value="@categoria.CategoriaId">@categoria.Nombre</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(() => Producto.CategoriaId)" />
                            </div>
                        </div>
                    </div>
                    <div class="col-4 text-center">
                        @if (!string.IsNullOrEmpty(Producto.ImagenUrl)) {
                            <img src="@Producto.ImagenUrl" alt="Imagen del producto" class="img-thumbnail img-small mb-2" />
                        }
                        <label class="form-label" for="imagen"><strong>Imagen</strong></label>
                        <label class="form-label" for="imagenUrl"><strong>Seleccione la Imagen del Producto</strong></label>
                        <InputFile OnChange="CargarImagen" />
                        <ValidationMessage For="@(() => Producto.ImagenUrl)" />
                    </div>
                </div>
            </div>
            <div class="card-footer text-center">
                <button class="btn btn-outline-secondary ms-2" type="button" @onclick="Volver">Volver</button>
                <button class="btn btn-outline-primary ms-2" type="submit">Guardar</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int ProductoId { get; set; }
    public Productos Producto { get; set; } = new Productos();
    public List<CategoriaProductos> Categorias { get; set; } = new List<CategoriaProductos>();
    public List<ToastMessage> Mensaje = new List<ToastMessage>();

    protected override async Task OnInitializedAsync() {
        if (ProductoId > 0) {
            Producto = await productoService.GetObject(ProductoId);
        }
        Categorias = (await categoriaService.GetAllObject()).ToList();
    }

    public async Task Editar() {
        if (!await Validar()) {
            var result = await productoService.UpdateObject(Producto);
            if (result) {
                Notificacion(ToastType.Success, $"{Producto.Nombre} Se ha Editado Correctamente.");
                Navigation.NavigateTo("/GourmetGrill/Productos/Index");
            }
            else {
                Notificacion(ToastType.Warning, $"Error al Editar el Producto");
            }
        }
        else {
            Notificacion(ToastType.Warning, $"Ya Existe un Producto con este Nombre");
        }
    }

    public async Task<bool> Validar() {
        var existe = await productoService.Exist(Producto.ProductoId, Producto.Nombre);
        return existe;
    }

    private async Task CargarImagen(InputFileChangeEventArgs e) {
        var imageFile = e.File;

        if (imageFile != null) {
            var containerClient = blobService.GetBlobContainerClient("gourmetweb");
            var blobClient = containerClient.GetBlobClient(imageFile.Name);

            await using var stream = imageFile.OpenReadStream();
            await blobClient.UploadAsync(stream, true);

            Producto.ImagenUrl = blobClient.Uri.ToString();
        }
    }

    private void ActualizarDisponibilidad(ChangeEventArgs e) {
        if (int.TryParse(e.Value?.ToString(), out int cantidad)) {
            Producto.Disponible = cantidad > 0;
        }
        else {
            Producto.Disponible = false;
        }
    }

    private void ActualizarITBIS(ChangeEventArgs e) {
        if (decimal.TryParse(e.Value?.ToString(), out decimal precio)) {
            Producto.ITBIS = (float)(precio * 0.18m);
        }
    }

    public void Volver() {
        Navigation.NavigateTo("/GourmetGrill/Productos/Index");
    }

    public void Notificacion(ToastType toastType, string message) => Mensaje.Add(CrearNotificacion(toastType, message));

    private ToastMessage CrearNotificacion(ToastType toastType, string message)
    => new ToastMessage {
            Type = toastType,
            Title = "Notificación",
            AutoHide = true,
            HelpText = $"{DateTime.Now}",
            Message = message,
        };
}

<style>
    .img-small {
        width: 350px;
        height: 300px;
        border-radius: 25px;
    }
</style>