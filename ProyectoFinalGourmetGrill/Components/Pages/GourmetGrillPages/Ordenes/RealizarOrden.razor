@page "/payment/{OrderId:int}"
@inject NavigationManager NavigationManager
@inject IServer<MetodoPagos> MetodoPagosService
@inject IServer<Ordenes> OrdenesService
@using Shared.Interfaces
@using Shared.Models

<h3>Seleccionar Método de Pago</h3>

<div class="card">
    <div class="card-header">
        <h4>Resumen del Pedido</h4>
    </div>
    <div class="card-body">
        @if (orden != null && orden.OrdenesDetalle.Any()) {
            <table class="table">
                <thead>
                    <tr>
                        <th>Producto</th>
                        <th>Cantidad</th>
                        <th>Precio</th>
                        <th>Monto</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var detalle in orden.OrdenesDetalle) {
                        <tr>
                            <td>@detalle.Producto.Nombre</td>
                            <td>@detalle.Cantidad</td>
                            <td>@detalle.Producto.Precio.ToString("C")</td>
                            <td>@(detalle.Cantidad * detalle.Producto.Precio).ToString("C")</td>
                        </tr>
                    }
                </tbody>
                <tfoot>
                    <tr>
                        <th colspan="3">Total</th>
                        <th>@orden.OrdenesDetalle.Sum(x => x.Producto.Precio * x.Cantidad).ToString("C")</th>
                    </tr>
                </tfoot>
            </table>
        }
        else {
            <p>No hay productos en tu carrito.</p>
        }
    </div>
</div>

<h4>Métodos de Pago</h4>
<ul class="list-group">
    @foreach (var metodo in MetodosDePago) {
        <li class="list-group-item">
            <button class="btn btn-primary" @onclick="() => Pagar(metodo)">@metodo.Nombre</button>
        </li>
    }
</ul>

@code {
    [Parameter] public int OrderId { get; set; }
    private List<MetodoPagos> MetodosDePago = new List<MetodoPagos>();
    private Ordenes orden { get; set; } = new Ordenes();

    protected override async Task OnInitializedAsync() {
        MetodosDePago = await MetodoPagosService.GetAllObject();
        orden = await OrdenesService.GetObject(OrderId);
    }

    private async Task Pagar(MetodoPagos metodo) {
        // Lógica para realizar el pago
        // Navegar a una página de confirmación o mostrar un mensaje de éxito
        NavigationManager.NavigateTo("/confirmation");
    }
}
